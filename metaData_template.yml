&global_fName 'tfr10292018_shearRun_f_{suffix}'
directories:
  LOCAL: '/path/to/local/working/directory'
  PROJECT: '/path/to/dir/with/long/term/storage'
  SCRATCH: '/path/to/dir/without/long/term/storage'
  CALIBRATION: '/path/to/dir/with/calibration/and/ilastik'


pipeline:
  - hash:
      stem:
        in: '{PROJECT}/raw_tiff'
        out: '{SCRATCH}/hash'
      fName:
        in: '/tfrGel10212018A_shearRun10292018f20181030_22333 PM_'
        out: '/hv{hv:03}_{mat}_hash.tif'
  - denoise:
      stem:
        in: '{SCRATCH}/hash'
        out: '{SCRATCH}/denoise'
        calibration: '{CALIBRATION}/denoise/camera_sn0000' # directory containing offset  and gain pixel maps
      fName:
        in: '/hv{hv:03}_{mat}_hash.tif'
        out: '/hv{hv:03}_{mat}_denoise.tif'
  - deconvolve:
      stem:
        in: '{SCRATCH}/denoise'
        out: '{SCRATCH}/decon'
        psf: '{CALIBRATION}/decon/psf'
        exec: '/path/to/deconLab2'
      fName:
        in: '/hv{hv:03}_mat_denoise.tif'
        out: '/hv{hv:03}_mat_decon.tif'
        psf: '/regexp_for_psf_slices.tif'
        exec: '/probably_something_like_deconLab2.jar'
  - segment:
      stem:
        in: '{SCRATCH}/decon'
        out: '{SCRATCH}/decon'
        model: '{CALIBRATION}/ilastik'
        exec: '/path/to/ilastik/installation'
      fName:
        in: '/hv{hv:03}_m{mat}_decon.tif'
        out: '/hv{hv:03}_m{mat}_pxProb.hdf'
        model: '/sedGel_split_6Channel_{flag}.ilp' #fileName of trained classifer model
        exec: '/something_like_ilastik.x'
  - locate:
      stem:
        in: '{SCRATCH}/decon'
        out: '{PROJECT}/locations'
      fName:
        in: '/hv{hv:03}_m{mat}_{flag}.tif' # flag is either 'decon' or 'pxProb'
        out: '/hv{hv:03}_m{mat}_{flag}.csv' # flag is either lsqRefine or centroid
  - track:
      stem:
        in: '{PROJECT}/locations'
        out: '{LOCAL}/track'
      fName:
        in: '/*m{mat}_{flag}*csv' # regexp to select all gel or sediment files to track
        out: *global_fName # not sure exactly what this does or if I can pass some formatting string or append to an alias

image:
  dim: {'x':2048, 'y': 2048, 'z': 560, 't': 1}
  px2Micron: {'x': 0.115, 'y': 0.115, 'z': 0.15} # list of multiplicative factors, this should be changed to just report raw and handle any upscaling when/if that happens during the pipleine
  gelSedimentLocation: 210 # location in z of gel/sediment transition in imaging stack. If tilted, report height to give thickest gel

hash:
  crop: True
  gel:
    dim: {'x':450, 'y':450, 'z':200} # XYZ dimensions of the hash
    minOverlap: {'x': 50, 'y': 50, 'z': 50} # minimum overlap in XYZ
    interface_pxOverlap: 50 # how much overlap in pixels should gel chunks have with sediment? \
    # This defines the upper bound for hashing gel chunks
  sed:
    dim: {'x':450, 'y':450, 'z':200} # XYZ dimensions of the hash
    minOverlap: {'x': 50, 'y': 50, 'z': 50} # minimum overlap in XYZ
    interface_pxOverlap: 70 # how much overlap in pixels should sed chunks have with gel? \

denoise:
  crop: False
  path:
    # relative paths on local dir (or symbolic links from local_dir)
    darkField: '/denoising/darkField' # folder containing darkField images specific to microscope camera
    pxGain: '/denoising/pxGain' # pxGain
    otf: '/denoising/otf' # optical transfer function
    raw_tiff: '/raw_tiff'
    output: '/denoise'
  fName:
      out_frmt: '{base}_m{mat}_t{t:04}.tif'
      in_frmt: 'input_file_format.tif'
  metaData:
    camera_serial: 0 # what's the serial number of the camera
    calibration_data: DD_MM_YYY # when was the calibration data taken?
    ACSN_param:
        NA: 1.3 # numerical aperature
        lambda: 0.560 # wavelength in microns
        pixelSize: 0.115 # pixel size in microns
        video: 'auto' # 'yes | no | default, flag for video input in ACsN
        weight: 0.2 # weight parameter, only tunable parameter in the code
        hotspot: True # boolean, whether to remove hotspots
        mode: 'Fast' # 'Fast' | 'Normal', not sure what this input changes, but fast is default
    input_calibration:
      gain: /path/to/px/gain/pickle/file
      offset: /path/to/offset/pickle/file
      cmap: /path/to/colormap/pickle/file

deconvolution:
  crop: True # this will pad and crop
  path:
    psf: '/relative/path/to/psf.tif'
    exec: '/path/to/executable'
    output: '/decon' # relative path to output
  fName:
    out_frmt: '{base}_m{mat}_decon_t{t:04}.tif'
  param: # dictionary of parameters for deconvolution
    method: 'RLTV' # richardson lucyy with total variation regularization
    lambda: 0.000001 # regularization parameter
    pad:
      x: 'E2'
      y: 'E2'

segmentation:
  path:
    ilastik_exec: '/path/to/ilastik/ilastik.x'
    ilastik_ilp: '/segmentation/pxClassifier.ilp' # path to trained network
    output: '/segmentation' # relative path to output
  fName:
    out_frmt: '{base}_m{mat}_t{t:03}.h5'

cg2ml:
  path:
    training: '/path/to/training/data'
    output: '/locations' # relative path to output
    exec: '/path/to/executable'

locating_tp:
  path:
    input: '/path/to/input/stack'
    output: '/locations' # relative path to output
  param: # all the parameters that need to be fed to trackpyy locating
    disc_size: 0.3

slurm_submission:
  path:
    input: ''
    output: '/path/to/sbatch/output'
    param: #SLURM keywords
      - n: 4
      - N: 1
      - queue : 'serial_requeu'
      - t : 0-16:00

visualize:
  path:
    input:
       locations: '/path/to/locations/xyz'
       image: '/path/to/image/to/compare/locations'
    output: '/path/to/output/images'












